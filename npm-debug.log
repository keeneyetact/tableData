0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.35
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\Oliver\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\Oliver\\AppData\\Roaming\\npm-cache\\tabulator\\1.0.1\\package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package.tgz
13 verbose folder .
14 info prepublish tabulator@1.0.1
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\Oliver\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile e77fe362-ache-tabulator-1-0-1-package-tgz tar://C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package.tgz
18 verbose lock tar://C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package.tgz C:\Users\Oliver\AppData\Roaming\npm-cache\e77fe362-ache-tabulator-1-0-1-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile e77fe362-ache-tabulator-1-0-1-package-tgz tar://C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package.tgz
22 silly lockFile e77fe362-ache-tabulator-1-0-1-package-tgz tar://C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package.tgz
23 silly lockFile 8f7b64f3-pm-cache-tabulator-1-0-1-package C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package
24 verbose lock C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package C:\Users\Oliver\AppData\Roaming\npm-cache\8f7b64f3-pm-cache-tabulator-1-0-1-package.lock
25 silly lockFile 8f7b64f3-pm-cache-tabulator-1-0-1-package C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package
26 silly lockFile 8f7b64f3-pm-cache-tabulator-1-0-1-package C:\Users\Oliver\AppData\Roaming\npm-cache\tabulator\1.0.1\package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'tabulator',
29 silly publish   version: '1.0.1',
29 silly publish   description: 'An easy to use table generation JQuery UI Plugin',
29 silly publish   main: 'tabulator.js',
29 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'https://github.com/olifolkerd/tabulator.git' },
29 silly publish   keywords:
29 silly publish    [ 'table',
29 silly publish      'grid',
29 silly publish      'jquery',
29 silly publish      'jqueryui',
29 silly publish      'sort',
29 silly publish      'format',
29 silly publish      'resizable',
29 silly publish      'list',
29 silly publish      'scrollable',
29 silly publish      'ajax',
29 silly publish      'json' ],
29 silly publish   author: { name: 'Oli Folkerd' },
29 silly publish   license: 'GPL',
29 silly publish   bugs: { url: 'https://github.com/olifolkerd/tabulator/issues' },
29 silly publish   homepage: 'https://github.com/olifolkerd/tabulator',
29 silly publish   readme: 'Tabulator\r\n================================\r\nAn easy to use table generation JQuery UI Plugin\r\n\r\nTabulator allows you to create  a table with in seconds from any JSON formatted data.\r\n\r\nIt is not dependant on any external css or images, simply include the library in your JQuery UI project and you\'re away!\r\n\r\n![Tabluator Table](/example_table.jpg?raw=true")\r\n\r\nTabulator is packed with useful  features including:\r\n\r\n- JSON, array or AJAX data loading\r\n- Column sorting\r\n- Custom data formatting\r\n- Resizable columns\r\n- Auto scaling  to fit data/element\r\n- Many theming options\r\n- Custom click and context Events\r\n- Callbacks at every stage of data processing and rendering\r\n\r\n\r\nSetup\r\n================================\r\nSetting up tabulator could not be simpler.\r\n\r\nInclude the library\r\n```html\r\n<script type="text/javascript" src="tabulator.js"></script>\r\n```\r\n\r\nCreate an element to hold the table\r\n```html\r\n<div id="example-table"><div>\r\n```\r\n\r\nTurn the element into a tabulator with some simple javascript\r\n```js\r\n$("#example-table").tabulator();\r\n```\r\n\r\n###Examples\r\nA selection of demo tables can be found in the ***examples.html*** file.\r\n\r\nDefine Column Headers\r\n================================\r\nColumn headers are defined as an array of JSON objects passed into the columns option when you create your tabulator\r\n\r\n```js\r\n$("#example-table").tabulator({\r\n\tcolumns:[\r\n\t\t{title:"Name", field:"name", sortable:true, sorter:"string", width:200},\r\n\t\t{title:"Age", field:"age", sortable:true, sorter:"number", align:"right", formatter:"progress"},\r\n\t\t{title:"Gender", field:"gender", sortable:true, sorter:"string", onClick:function(e, val, cell, row){console.log("cell click")},},\r\n\t\t{title:"Height", field:"height", sortable:true, formatter:"star", align:"center", width:100},\r\n\t\t{title:"Favourite Color", field:"col", sorter:"string", sortable:false},\r\n\t\t{title:"Date Of Birth", field:"dob", sortable:true, sorter:"date", align:"center"},\r\n\t\t{title:"Cheese Preference", field:"cheese", sortable:true, sorter:"boolean", align:"center", formatter:"tickCross"},\r\n\t],\r\n});\r\n```\r\nThere are a number of parameters that can be passed in with each column to determine how it is displayed:\r\n\r\n- **title** - ***Required*** This is the title that will be displayed in the header for this column\r\n- **field** - ***Required*** this is the key for this column in the data array\r\n- **align** - sets the text alignment for this column (left|center|right)\r\n- **width** - sets the width of this column (if not set the system will determine the best)\r\n- **sortable** - determines if the user can sort data by this column (see [Sorting Data](#sorting-data) for more details)\r\n- **sorter** - determines how to sort data in this column (see [Sorting Data](#sorting-data) for more details)\r\n- **formatter** - set how you would like the data to be formatted (see [Formatting Data](#formatting-data) for more details)\r\n- **onClick** - callback for when user clicks on a cell in this column (see [Callbacks](#callbacks) for more details)\r\n\r\nSet Table Data\r\n================================\r\nTabulator row data is defined as an array of objects, that can either be passed as an array or retrieved  as a JSON formatted string via AJAX from a URL.\r\n\r\nThe data can contain more columns that are defined in the columns options, these will be sorted with the rest of the data, but not rendered to screen.\r\n\r\nA unique "id" value must be present for each row of data, if it is missing Tabluator will add one.\r\n\r\nan example JSON data set:\r\n```js\r\n[\r\n\t{id:1, name:"Billy Bob", age:"12", gender:"male", height:1, col:"red", dob:"", cheese:1},\r\n\t{id:2, name:"Mary May", age:"1", gender:"female", height:2, col:"blue", dob:"14/05/1982", cheese:true},\r\n\t{id:3, name:"Christine Lobowski", age:"42", height:0, col:"green", dob:"22/05/1982", cheese:"true"},\r\n\t{id:4, name:"Brendon Philips", age:"125", gender:"male", height:1, col:"orange", dob:"01/08/1980"},\r\n\t{id:5, name:"Margret Marmajuke", age:"16", gender:"female", height:5, col:"yellow", dob:"31/01/1999"},\r\n\t{id:6, name:"Billy Bob", age:"12", gender:"male", height:1, col:"red", dob:"", cheese:1},\r\n\t{id:7, name:"Mary May", age:"1", gender:"female", height:2, col:"blue", dob:"14/05/1982", cheese:true},\r\n\t{id:8, name:"Christine Lobowski", age:"42", height:0, col:"green", dob:"22/05/1982", cheese:"true"},\r\n\t{id:9, name:"Brendon Philips", age:"125", gender:"male", height:1, col:"orange", dob:"01/08/1980"},\r\n\t{id:10, name:"Margret Marmajuke", age:"16", gender:"female", height:5, col:"yellow", dob:"31/01/1999"},\r\n]\r\n```\r\n\r\n###Set data using array\r\nYou can pass an array directly to the table using the ***setData*** method.\r\n\r\n```js\r\n$("#example-table").tabulator("setData",[\r\n\t{id:1, name:"Billy Bob", age:"12", gender:"male", height:1, col:"red", dob:"", cheese:1},\r\n\t{id:2, name:"Mary May", age:"1", gender:"female", height:2, col:"blue", dob:"14/05/1982", cheese:true},\r\n]);\r\n```\r\n\r\n###Set data using AJAX\r\nIf you wish to retrieve your data from a remote source, pass the URL to the ***setData*** method and it will perform the AJAX request for you. The URL can be absolute or relative.\r\n\r\n```js\r\n$("#example-table").tabulator("setData","http://www.getmydata.com/now");\r\n```\r\nData must be provided in the form of a JSON formatted array of objects.\r\n\r\nIf you always request the same url for your data then you can set it in the ***ajaxURL*** option when you create your Tabulator\r\n```js\r\n$("#example-table").tabulator({\r\n\tajaxURL:"http://www.getmydata.com/now",\r\n});\r\n```\r\nand call ***setData*** to refresh the data at any point\r\n```js\r\n$("#example-table").tabulator("setData");\r\n```\r\n\r\nSorting Data\r\n================================\r\nSorting of data by column is enabled by default on all columns. It is possible to turn sorting on or off globally using the ***sortable*** option when you create your Tabulator.\r\n```js\r\n$("#example-table").tabulator({\r\n\tsortable:false, // this option takes a boolean value (default = true)\r\n});\r\n\r\nyou can set sorting on a per column basis using the ***sortable*** option in the column data.\r\n```js\r\n{title:"Name", field:"name", sortable:true, sorter:"string"}\r\n```\r\n\r\n### Sorter type\r\nBy default all data is sorted as a string. if you wish to specify a different sorting method then you should include the ***sorter*** option in the column data.\r\n\r\nTabulator comes with a number of preconfigured sorters including:\r\n- **string** - sorts column as strings of characters\r\n- **number** - sorts column as numbers (integer or float)\r\n- **boolean** - sorts column as booleans\r\n- **date** - sorts column as dates (for this you will need to set the date format using the ***dateFormat*** option when you create your table. default format is "dd/mm/yyyy")\r\n\r\nYou can define a custom sorter function in the sorter option:\r\n```js\r\n{title:"Name", field:"name", sortable:true, sorter:function(a, b){\r\n\t\t//a and b are the two values being compared\r\n\t\treturn a - b; //you must return the difference between the two values\r\n\t},\r\n}\r\n```\r\n\r\nFormatting Data\r\n================================\r\nTabulator allows you to format your data in a wide variety of ways, so your tables can display information in a more graphical and clear layout.\r\n\r\nyou can set formatters on a per column basis using the ***formatter*** option in the column data.\r\n```js\r\n{title:"Name", field:"name", formatter:"tick"}\r\n```\r\n\r\nTabulator comes with a number of preconfigured formatters including:\r\n- **email** - renders data as an anchor with a mailto: link to the given value\r\n- **link** - renders data as an anchor with a link to the given value\r\n- **tick** - displays a green tick if the value is (true|\'true\'|\'True\'|1) and an empty cell if not\r\n- **tickCross** - displays a green tick if the value is (true|\'true\'|\'True\'|1) and a red cross if not\r\n- **star** - displays a graphical 0-5 star rating based on integer values from 0-5\r\n- **progress** - displays a progress bar that fills the cell from left to right, using values 0-100 as a percentage of width\r\n\r\nYou can define a custom formatter function in the formatter option:\r\n```js\r\n{title:"Name", field:"name", formatter:function(value, data, cell, row, options){\r\n\t\t//value - the value of the cell\r\n\t\t//data - the data for the row the cell is in\r\n\t\t//cell - the DOM element of the cell\r\n\t\t//row - the DOM element of the row\r\n\t\t//options - the options set for this tabulator\r\n\t\treturn "<div></div>"; // must return the html or jquery element of the html for the contents of the cell;\r\n\t},\r\n}\r\n```\r\n\r\nTable Layout\r\n================================\r\nTabulator will arrange your data to fit as neatly as possible into the space provided. It has two different layout styles:\r\n\r\n- Fit columns to data (default)\r\n- Fit columns to container\r\n\r\n###Fit Columns to data\r\nThis is the default table layout style and will cause columns to resize to fit the widest element they contain (unless a column width was set in the column options). This can cause the table to be wider than its containing element, in this case a scroll bar will appear;\r\n\r\n###Fit Columns to container\r\nThis option will resize columns so that they fit perfectly inside the width of the container.\r\n\r\nIf a width is specified on any columns, where possible the columns will be set at this width and other columns will be resized around them. If there is not enough space to fit all the columns in, then all column widths are ignored and they are sized equally.\r\n\r\nIn this layout style at least one column must ***not*** have a width specified so it can be resized to fill any spare space.\r\n\r\nto enable this layout mode set the ***fitColumns*** option to true when you create your Tabulator.\r\n```js\r\n$("#example-table").tabulator({\r\n\tfitColumns:true, // this option takes a boolean value (default = false)\r\n});\r\n```\r\n\r\n###Resizable columns\r\nBy default it is possible to manually resize columns by dragging the borders of the column headers.\r\n\r\nTo disable this option globally set the ***colResizable*** option to false when you create your Tabulator.\r\n```js\r\n$("#example-table").tabulator({\r\n\tcolResizable:false, // this option takes a boolean value (default = true)\r\n});\r\n```\r\n\r\n###Minimum Column Width\r\nIt is possible to set a minimum column width to prevent resizing columns from becoming too small.\r\n\r\nThis can be set globally, by setting the ***colMinWidth*** option to the column width when you create your Tabulator.\r\n```js\r\n$("#example-table").tabulator({\r\n\tcolMinWidth:80, //Minimum column width in px (default = 40)\r\n});\r\n```\r\n\r\n###Redrawing the table\r\nIf the size of the element containing the Tabulator changes it is necessary to redraw the table to make sure the columns fit the new dimensions.\r\n\r\nThis can be done by calling the ***redraw*** method. For example, to trigger a redraw whenever the viewport width is changed:\r\n```js\r\n$(window).resize(function(){\r\n\t$("#example-table").tabulator("redraw");\r\n});\r\n```\r\n\r\nTable Options\r\n================================\r\nIn addition to the features mentioned above Tabulator has a range of aditional options to help customise your table.\r\n\r\n###Table Theming\r\nTabulator allows you to set a number of global options that can help theme your table.\r\n\r\nOption | Data Type | Default Value | Description\r\n---|---|---|---\r\nbackgroundColor|string|#888| A valid css color(rgb,hex,etc...) for the background of the tabulator element\r\nborderColor|string|#999| A valid css color(rgb,hex,etc...) for the border of the tabulator element\r\ntextSize|int/string|14| the text size for all text in the tabulator\r\nheaderBackgroundColor|string|#e6e6e6|A valid css color(rgb,hex,etc...) for the header cells\r\nheaderTextColor|string|#555|A valid css color(rgb,hex,etc...) for the header cells text\r\nheaderBorderColor|string|#aaa|A valid css color(rgb,hex,etc...) for the header cells border\r\nheaderSeperatorColor|string|#999|A valid css color(rgb,hex,etc...) for the header row bottom border\r\nheaderMargin|int/string|4|The size in pixels for the header cells margin\r\nsortArrows|object||an object containing two options for theming the sorter arrows in the header *(see next table)*\r\nrowBackgroundColor|string|#fff|A valid css color(rgb,hex,etc...) for the background colour of the table rows\r\nrowBorderColor|string|#fff|A valid css color(rgb,hex,etc...) for the table row borders\r\nrowTextColor|string|#333|A valid css color(rgb,hex,etc...) for the table row text\r\nrowHoverBackground|string|#bbb|A valid css color(rgb,hex,etc...) for the table row background when hovered over.\r\n\r\n#####Sort Arrow Theming\r\nThe ***sortArrows*** option contains two options\r\n\r\nOption | Data Type | Default Value | Description\r\n---|---|---|---\r\nactive|string|#666| A valid css color(rgb,hex,etc...) for the sorter arrow on currently sorted column\r\ninactive|string|#bbb|A valid css color(rgb,hex,etc...) for the sorter arrow on unsorted column\r\n\r\n\r\n###Table Size\r\n\r\nOption | Data Type | Default Value | Description\r\n---|---|---|---\r\nheight|string/int|false|Sets the height of the containing element, can be set to any valid height css value. If set to false (the default), the height of the table will resize to fit the table data.\r\n\r\n\r\n###Data Loaders\r\nWhen loading data, Tabulator can display a loading overlay over the table. This consists of a modal background and a loader element. The loader element can be set globally in the options and should be specified as a div with a ***display*** style of ***inline-block***.\r\n\r\nOption | Data Type | Default Value | Description\r\n---|---|---|---\r\nshowLoader|boolean|true| Show loader while data is loading\r\nloader|string|html (see below)| html for loader element\r\nloaderError|string|html (see below)| html for the loader element in the event of an error\r\n\r\n#####Default loader element\r\n```html\r\n<div style=\'display:inline-block; border:4px solid #333; border-radius:10px; background:#fff; font-weight:bold; font-size:16px; color:#000; padding:10px 20px;\'>Loading Data</div>\r\n```\r\n\r\n#####Default loader error element\r\n```html\r\n<div style=\'display:inline-block; border:4px solid #D00; border-radius:10px; background:#fff; font-weight:bold; font-size:16px; color:#590000; padding:10px 20px;\'>Loading Error</div>\r\n```\r\n\r\nCallbacks\r\n================================\r\nTabulator features a range of callbacks to allow you to handle user interaction.\r\n\r\n###Cell Click\r\nThe cell click callback is triggered when a user left clicks on a cell, it can be set on a per column basis using the ***onClick*** option in the columns data.\r\n\r\n```js\r\n{title:"Name", field:"name", onClick:function(e, cell, value, data){\r\n\t\t//e - the click event object\r\n\t\t//cell - the DOM element of the cell\r\n\t\t//value - the value of the cell\r\n\t\t//data - the data for the row the cell is in\r\n\t},\r\n}\r\n```\r\n\r\n###Row Click\r\nThe row click callback is triggered when a user clicks on a row, it can be set globally, by setting the ***rowClick*** option when you create your Tabulator.\r\n```js\r\n$("#example-table").tabulator({\r\n\trowClick:function(e, id, data, row){\r\n\t\t//e - the click event object\r\n\t\t//id - the id of the row\r\n\t\t//data - the data for the row\r\n\t\t//row - the DOM element of the row\r\n\t},\r\n});\r\n```\r\n\r\n###Row Context Menu\r\nThe row context callback is triggered when a user right clicks on a row, it can be set globally, by setting the ***rowContext*** option when you create your Tabulator.\r\n```js\r\n$("#example-table").tabulator({\r\n\trowContext:function(e, id, data, row){\r\n\t\t//e - the click event object\r\n\t\t//id - the id of the row\r\n\t\t//data - the data for the row\r\n\t\t//row - the DOM element of the row\r\n\t},\r\n});\r\n```\r\n\r\n###Data Loaded\r\nThe data loaded callback is triggered when a new set of data is loaded into the table, it can be set globally, by setting the ***dataLoaded*** option when you create your\r\n```js\r\n$("#example-table").tabulator({\r\n\tdataLoaded:function(data){\r\n\t\t//data - the data for the row\r\n\t},\r\n});\r\n```\r\n\r\nEvents\r\n================================\r\nA number of events are fired as the Tabulator is loaded and rendered:\r\n\r\nEvent | Description\r\n---|---\r\ndataLoading|Data is being loaded (from string, array or AJAX source)\r\ndataLoadError|There is has been an error loading data from an AJAX source\r\nrenderStarted|Table is has started to render\r\nrenderComplete|Table is has finished being rendered\r\nsortStarted|Table has started sorting\r\nsortComplete|Table has finished sorting\r\n\r\nComing Soon\r\n================================\r\nTabulator is actively under development and I plan to have even more useful features implemented soon, including:\r\n\r\n- Grouping Data\r\n- Filtering Data\r\n- Editable Cells\r\n- Movable Rows\r\n- Deleteable Rows\r\n- Extra Formatters\r\n- Extra Sorters\r\n- More Theming Options',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: '0a9856d8b707f4cfe3155bd6e96567b5e3c755d7',
29 silly publish   _id: 'tabulator@1.0.1',
29 silly publish   _shasum: 'feb271b9153b68acf4520d6acfb3faa5c817325a',
29 silly publish   _from: '.' }
30 verbose request where is /tabulator
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 5606ecb817a58254
33 verbose url raw /tabulator
34 verbose url resolving [ 'https://registry.npmjs.org/', './tabulator' ]
35 verbose url resolved https://registry.npmjs.org/tabulator
36 verbose request where is https://registry.npmjs.org/tabulator
37 info trying registry request attempt 1 at 10:42:11
38 http PUT https://registry.npmjs.org/tabulator
39 http 403 https://registry.npmjs.org/tabulator
40 verbose headers { 'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '101',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   date: 'Sat, 07 Nov 2015 10:42:13 GMT',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   connection: 'keep-alive',
40 verbose headers   'x-served-by': 'cache-lhr6321-LHR',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1446892932.395870,VS0,VE1248' }
41 error publish Failed PUT 403
42 error Error: You do not have permission to publish 'tabulator'. Are you logged in as the correct user? : tabulator
42 error     at RegClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:308:14)
42 error     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:246:65)
42 error     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:944:16
42 error     at process._tickCallback (node.js:442:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Windows_NT 6.2.9200
45 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error cwd E:\Google Drive\Personal Projects\tabulator
47 error node -v v0.10.35
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
